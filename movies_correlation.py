# -*- coding: utf-8 -*-
"""Movies Correlation .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OQ0m8S8KVFcgymShuJLicqXWxE_RVKZ_
"""

# Commented out IPython magic to ensure Python compatibility.
#Import Libraries

import numpy as np
import pandas as pd
import seaborn as sns

import matplotlib
import matplotlib.pyplot as plt
plt.style.use('ggplot')
from matplotlib.pyplot import figure

# %matplotlib inline 
matplotlib.rcParams['figure.figsize']=(12,8) #Adjusts the configuration of the plots we will create

#Read the Data 

Data=pd.read_csv('/content/movies.csv')

#Lets look Data 
Data.head()

#let's see if there is any missing data

for col in Data.columns:
    pct_missing=np.mean(Data[col].isnull())
    print('{} - {}%'.format(col,pct_missing))

#Data Type for our colums 
Data.dtypes

Data["budget"]=Data["budget"].astype('Int64')

Data["gross"]=Data["gross"].astype('Int64')

#Create Current Year Column 
Data['yearcorrent']=Data['released'].astype(str).str[:4]

Data=Data.sort_values(by=['gross'],inplace=False,ascending=False)

pd.set_option('display.max_rows',None)

#Drop any dipiicate

Data['company']=Data['company'].drop_duplicates().sort_values(ascending=False)

Data.drop_duplicates()

#Budget High Correlation 
#Company High Correlation

Data.dtypes

Data['budget'].fillna(int(Data['budget'].mean()),inplace=True)

Data['gross'].fillna(int(Data['gross'].mean()),inplace=True)

Data.head()

#Scatter plot with Budget vs Gross

plt.scatter(x=Data["budget"], y=Data["gross"])
plt.title("Budget Vs Gross Earnings ")

plt.xlabel("Gross Earnings")

plt.ylabel("Budget for Film")
plt.show()

Data.head()

#Plot Budget Vs Gross Using Seaborn

sns.regplot(x='budget',y='gross',data=Data,scatter_kws={"color":"Red"},line_kws={"color":"blue"})

#Let's Start Looking at Correlatiom

Data.corr(method="kendall")

#High Correlation between budget and gross

correlation_matrix = Data.corr()

sns.heatmap(correlation_matrix, annot = True)

plt.title("Correlation matrix for Numeric Features")

plt.xlabel("Movie features")

plt.ylabel("Movie features")

plt.show()

Data.head()

Data_numerized= Data

for col_name in Data.columns:
    if(Data_numerized[col_name].dtype == 'object'):
        Data_numerized[col_name]= Data_numerized[col_name].astype('category')
        Data_numerized[col_name] = Data_numerized[col_name].cat.codes
        
Data_numerized

Data

correlation_matrix = Data_numerized.corr(method='pearson')

sns.heatmap(correlation_matrix, annot = True)

plt.title("Correlation matrix for Movies")

plt.xlabel("Movie features")

plt.ylabel("Movie features")

plt.show()

Data_numarized.corr()

correlation_mat=Data_numarized.corr()
corr_pairs=correlation_mat.unstack()
corr_pairs

sorted_pairs=corr_pairs.sort_values()

sorted_pairs

high_corr=sorted_pairs[(sorted_pairs)>0.5]

high_corr

#Votes and budget have the highest correlation to Gross Earnings 

#Company Has a low correlation